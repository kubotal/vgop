// Code generated by mockery v2.40.3. DO NOT EDIT.

package wipefs

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockWipefs is an autogenerated mock type for the Wipefs type
type MockWipefs struct {
	mock.Mock
}

type MockWipefs_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWipefs) EXPECT() *MockWipefs_Expecter {
	return &MockWipefs_Expecter{mock: &_m.Mock}
}

// Wipe provides a mock function with given fields: ctx, deviceName
func (_m *MockWipefs) Wipe(ctx context.Context, deviceName string) error {
	ret := _m.Called(ctx, deviceName)

	if len(ret) == 0 {
		panic("no return value specified for Wipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, deviceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWipefs_Wipe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wipe'
type MockWipefs_Wipe_Call struct {
	*mock.Call
}

// Wipe is a helper method to define mock.On call
//   - ctx context.Context
//   - deviceName string
func (_e *MockWipefs_Expecter) Wipe(ctx interface{}, deviceName interface{}) *MockWipefs_Wipe_Call {
	return &MockWipefs_Wipe_Call{Call: _e.mock.On("Wipe", ctx, deviceName)}
}

func (_c *MockWipefs_Wipe_Call) Run(run func(ctx context.Context, deviceName string)) *MockWipefs_Wipe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockWipefs_Wipe_Call) Return(_a0 error) *MockWipefs_Wipe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWipefs_Wipe_Call) RunAndReturn(run func(context.Context, string) error) *MockWipefs_Wipe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWipefs creates a new instance of MockWipefs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWipefs(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWipefs {
	mock := &MockWipefs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
