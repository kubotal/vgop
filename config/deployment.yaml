apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: vgop
    control-plane: controller-manager
  name: vgop-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: lvmvolumegroupnodestatuses.vgop.kubotal.io
spec:
  group: vgop.kubotal.io
  names:
    kind: LVMVolumeGroupNodeStatus
    listKind: LVMVolumeGroupNodeStatusList
    plural: lvmvolumegroupnodestatuses
    singular: lvmvolumegroupnodestatus
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LVMVolumeGroupNodeStatus is the Schema for the lvmvolumegroupnodestatuses
          API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: LVMVolumeGroupNodeStatusSpec defines the desired state of
              LVMVolumeGroupNodeStatus
            properties:
              nodeStatus:
                description: NodeStatus contains the per node status of the VG
                items:
                  properties:
                    deviceDiscoveryPolicy:
                      default: RuntimeDynamic
                      description: |-
                        DeviceDiscoveryPolicy is a field to indicate whether the devices are discovered
                        at runtime or preconfigured through a DeviceSelector
                        Setting this to DeviceDiscoveryPolicyPreconfigured indicates the devices are preconfigured through a DeviceSelector.
                        Setting this to DeviceDiscoveryPolicyRuntimeDynamic indicates the devices are added to the VG dynamically if they are present at runtime.
                        By default, the value is set to RuntimeDynamic.
                      enum:
                      - Preconfigured
                      - RuntimeDynamic
                      type: string
                    devices:
                      description: Devices is the list of devices used by the volume
                        group
                      items:
                        type: string
                      type: array
                    excluded:
                      description: |-
                        Excluded contains the per node status of applied device exclusions that were picked up via selector,
                        but were not used for other reasons.
                      items:
                        properties:
                          name:
                            description: Name is the device that was filtered
                            type: string
                          reasons:
                            description: Reasons are the human-readable reasons why
                              the device was excluded from the volume group
                            items:
                              type: string
                            type: array
                        required:
                        - name
                        - reasons
                        type: object
                      type: array
                    name:
                      description: Name is the name of the volume group
                      type: string
                    reason:
                      description: Reason provides more detail on the volume group
                        creation status
                      type: string
                    status:
                      description: Status tells if the volume group was created on
                        the node
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: LVMVolumeGroupNodeStatusStatus defines the observed state
              of LVMVolumeGroupNodeStatus
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.15.0
  name: lvmvolumegroups.vgop.kubotal.io
spec:
  group: vgop.kubotal.io
  names:
    kind: LVMVolumeGroup
    listKind: LVMVolumeGroupList
    plural: lvmvolumegroups
    singular: lvmvolumegroup
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LVMVolumeGroup is the Schema for the lvmvolumegroups API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: LVMVolumeGroupSpec defines the desired state of LVMVolumeGroup
            properties:
              default:
                description: Default is a flag to indicate whether the device-class
                  is the default
                type: boolean
              deviceSelector:
                description: DeviceSelector is a set of rules that should match for
                  a device to be included in this VG
                properties:
                  forceWipeDevicesAndDestroyAllData:
                    description: |-
                      ForceWipeDevicesAndDestroyAllData is a flag to force wipe the selected devices.
                      This wipes the file signatures on the devices. Use this feature with caution.
                      Force wipe the devices only when you know that they do not contain any important data.
                    type: boolean
                  optionalPaths:
                    description: OptionalPaths specify the optional device paths.
                    items:
                      type: string
                    type: array
                  paths:
                    description: Paths specify the device paths.
                    items:
                      type: string
                    type: array
                type: object
              nodeSelector:
                description: NodeSelector chooses nodes
                properties:
                  nodeSelectorTerms:
                    description: Required. A list of node selector terms. The terms
                      are ORed.
                    items:
                      description: |-
                        A null or empty node selector term matches no objects. The requirements of
                        them are ANDed.
                        The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                      properties:
                        matchExpressions:
                          description: A list of node selector requirements by node's
                            labels.
                          items:
                            description: |-
                              A node selector requirement is a selector that contains values, a key, and an operator
                              that relates the key and values.
                            properties:
                              key:
                                description: The label key that the selector applies
                                  to.
                                type: string
                              operator:
                                description: |-
                                  Represents a key's relationship to a set of values.
                                  Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                type: string
                              values:
                                description: |-
                                  An array of string values. If the operator is In or NotIn,
                                  the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                  the values array must be empty. If the operator is Gt or Lt, the values
                                  array must have a single element, which will be interpreted as an integer.
                                  This array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                        matchFields:
                          description: A list of node selector requirements by node's
                            fields.
                          items:
                            description: |-
                              A node selector requirement is a selector that contains values, a key, and an operator
                              that relates the key and values.
                            properties:
                              key:
                                description: The label key that the selector applies
                                  to.
                                type: string
                              operator:
                                description: |-
                                  Represents a key's relationship to a set of values.
                                  Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                type: string
                              values:
                                description: |-
                                  An array of string values. If the operator is In or NotIn,
                                  the values array must be non-empty. If the operator is Exists or DoesNotExist,
                                  the values array must be empty. If the operator is Gt or Lt, the values
                                  array must have a single element, which will be interpreted as an integer.
                                  This array is replaced during a strategic merge patch.
                                items:
                                  type: string
                                type: array
                                x-kubernetes-list-type: atomic
                            required:
                            - key
                            - operator
                            type: object
                          type: array
                          x-kubernetes-list-type: atomic
                      type: object
                      x-kubernetes-map-type: atomic
                    type: array
                    x-kubernetes-list-type: atomic
                required:
                - nodeSelectorTerms
                type: object
                x-kubernetes-map-type: atomic
              thinPoolConfig:
                description: ThinPoolConfig contains configurations for the thin-pool
                properties:
                  chunkSize:
                    anyOf:
                    - type: integer
                    - type: string
                    description: |-
                      ChunkSize specifies the statically calculated chunk size for the thin pool.
                      Thus, It is only used when the ChunkSizeCalculationPolicy is set to Static.
                      No ChunkSize with a ChunkSizeCalculationPolicy set to Static will result in a default chunk size of 128Ki.
                      It can be between 64Ki and 1Gi due to the underlying limitations of lvm2.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    x-kubernetes-int-or-string: true
                  chunkSizeCalculationPolicy:
                    default: Static
                    description: |-
                      ChunkSizeCalculationPolicy specifies the policy to calculate the chunk size for the underlying volume.
                      When set to Host, the chunk size is calculated based on the lvm2 host setting on the node.
                      When set to Static, the chunk size is calculated based on the static size attribute provided within ChunkSize.
                    enum:
                    - Host
                    - Static
                    type: string
                  name:
                    description: Name specifies a name for the thin pool.
                    type: string
                  overprovisionRatio:
                    description: OverProvisionRatio specifies a factor by which you
                      can provision additional storage based on the available storage
                      in the thin pool. To prevent over-provisioning through validation,
                      set this field to 1.
                    minimum: 1
                    type: integer
                  sizePercent:
                    default: 90
                    description: SizePercent specifies the percentage of space in
                      the LVM volume group for creating the thin pool.
                    maximum: 90
                    minimum: 10
                    type: integer
                required:
                - name
                - overprovisionRatio
                type: object
            type: object
          status:
            description: LVMVolumeGroupStatus defines the observed state of LVMVolumeGroup
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: vgop
  name: vgop-controller-manager
  namespace: vgop-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: vgop
  name: vgop-leader-election-role
  namespace: vgop-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vgop-manager-role
rules:
- apiGroups:
  - vgop.kubotal.io
  resources:
  - lvmvolumegroupnodestatuses
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - vgop.kubotal.io
  resources:
  - lvmvolumegroupnodestatuses/finalizers
  verbs:
  - update
- apiGroups:
  - vgop.kubotal.io
  resources:
  - lvmvolumegroupnodestatuses/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - vgop.kubotal.io
  resources:
  - lvmvolumegroups
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - vgop.kubotal.io
  resources:
  - lvmvolumegroups/finalizers
  verbs:
  - update
- apiGroups:
  - vgop.kubotal.io
  resources:
  - lvmvolumegroups/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: vgop
  name: vgop-leader-election-rolebinding
  namespace: vgop-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vgop-leader-election-role
subjects:
- kind: ServiceAccount
  name: vgop-controller-manager
  namespace: vgop-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: vgop
  name: vgop-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vgop-manager-role
subjects:
- kind: ServiceAccount
  name: vgop-controller-manager
  namespace: vgop-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: vgop
    control-plane: controller-manager
  name: vgop-controller-manager
  namespace: vgop-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --leader-elect
        - --health-probe-bind-address=:8081
        command:
        - /manager
        image: quay.io/kubotal/vgop:0.1.0.snapshot
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: vgop-controller-manager
      terminationGracePeriodSeconds: 10
